// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: examples/proto/examplepb/unannotated_echo_service.proto

package examplepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/duration"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UnannotatedEchoService service

type UnannotatedEchoService interface {
	// Echo method receives a simple message and returns it.
	//
	// The message posted as the id parameter will also be
	// returned.
	Echo(ctx context.Context, in *UnannotatedSimpleMessage, opts ...client.CallOption) (*UnannotatedSimpleMessage, error)
	// EchoBody method receives a simple message and returns it.
	EchoBody(ctx context.Context, in *UnannotatedSimpleMessage, opts ...client.CallOption) (*UnannotatedSimpleMessage, error)
	// EchoDelete method receives a simple message and returns it.
	EchoDelete(ctx context.Context, in *UnannotatedSimpleMessage, opts ...client.CallOption) (*UnannotatedSimpleMessage, error)
}

type unannotatedEchoService struct {
	c    client.Client
	name string
}

func NewUnannotatedEchoService(name string, c client.Client) UnannotatedEchoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "grpc.gateway.examples.examplepb"
	}
	return &unannotatedEchoService{
		c:    c,
		name: name,
	}
}

func (c *unannotatedEchoService) Echo(ctx context.Context, in *UnannotatedSimpleMessage, opts ...client.CallOption) (*UnannotatedSimpleMessage, error) {
	req := c.c.NewRequest(c.name, "UnannotatedEchoService.Echo", in)
	out := new(UnannotatedSimpleMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unannotatedEchoService) EchoBody(ctx context.Context, in *UnannotatedSimpleMessage, opts ...client.CallOption) (*UnannotatedSimpleMessage, error) {
	req := c.c.NewRequest(c.name, "UnannotatedEchoService.EchoBody", in)
	out := new(UnannotatedSimpleMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unannotatedEchoService) EchoDelete(ctx context.Context, in *UnannotatedSimpleMessage, opts ...client.CallOption) (*UnannotatedSimpleMessage, error) {
	req := c.c.NewRequest(c.name, "UnannotatedEchoService.EchoDelete", in)
	out := new(UnannotatedSimpleMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UnannotatedEchoService service

type UnannotatedEchoServiceHandler interface {
	// Echo method receives a simple message and returns it.
	//
	// The message posted as the id parameter will also be
	// returned.
	Echo(context.Context, *UnannotatedSimpleMessage, *UnannotatedSimpleMessage) error
	// EchoBody method receives a simple message and returns it.
	EchoBody(context.Context, *UnannotatedSimpleMessage, *UnannotatedSimpleMessage) error
	// EchoDelete method receives a simple message and returns it.
	EchoDelete(context.Context, *UnannotatedSimpleMessage, *UnannotatedSimpleMessage) error
}

func RegisterUnannotatedEchoServiceHandler(s server.Server, hdlr UnannotatedEchoServiceHandler, opts ...server.HandlerOption) error {
	type unannotatedEchoService interface {
		Echo(ctx context.Context, in *UnannotatedSimpleMessage, out *UnannotatedSimpleMessage) error
		EchoBody(ctx context.Context, in *UnannotatedSimpleMessage, out *UnannotatedSimpleMessage) error
		EchoDelete(ctx context.Context, in *UnannotatedSimpleMessage, out *UnannotatedSimpleMessage) error
	}
	type UnannotatedEchoService struct {
		unannotatedEchoService
	}
	h := &unannotatedEchoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UnannotatedEchoService{h}, opts...))
}

type unannotatedEchoServiceHandler struct {
	UnannotatedEchoServiceHandler
}

func (h *unannotatedEchoServiceHandler) Echo(ctx context.Context, in *UnannotatedSimpleMessage, out *UnannotatedSimpleMessage) error {
	return h.UnannotatedEchoServiceHandler.Echo(ctx, in, out)
}

func (h *unannotatedEchoServiceHandler) EchoBody(ctx context.Context, in *UnannotatedSimpleMessage, out *UnannotatedSimpleMessage) error {
	return h.UnannotatedEchoServiceHandler.EchoBody(ctx, in, out)
}

func (h *unannotatedEchoServiceHandler) EchoDelete(ctx context.Context, in *UnannotatedSimpleMessage, out *UnannotatedSimpleMessage) error {
	return h.UnannotatedEchoServiceHandler.EchoDelete(ctx, in, out)
}
