// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: examples/proto/examplepb/echo_service.proto

/*
Package examplepb is a generated protocol buffer package.

Echo Service

Echo Service API consists of a single service which returns
a message.

It is generated from these files:
	examples/proto/examplepb/echo_service.proto
	examples/proto/examplepb/a_bit_of_everything.proto
	examples/proto/examplepb/stream.proto
	examples/proto/examplepb/flow_combination.proto
	examples/proto/examplepb/wrappers.proto
	examples/proto/examplepb/unannotated_echo_service.proto
	examples/proto/examplepb/response_body_service.proto

It has these top-level messages:
	Embedded
	SimpleMessage
	ABitOfEverything
	ABitOfEverythingRepeated
	Body
	MessageWithBody
	MimicObjectResponse
	MimicObjectRequest
	MimicObjectHidden
	UpdateV2Request
	EmptyProto
	NonEmptyProto
	UnaryProto
	NestedProto
	SingleNestedProto
	Wrappers
	UnannotatedSimpleMessage
	ResponseBodyIn
	ResponseBodyOut
*/
package examplepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for EchoService service

type EchoService interface {
	// Echo method receives a simple message and returns it.
	//
	// The message posted as the id parameter will also be
	// returned.
	Echo(ctx context.Context, in *SimpleMessage, opts ...client.CallOption) (*SimpleMessage, error)
	// EchoBody method receives a simple message and returns it.
	EchoBody(ctx context.Context, in *SimpleMessage, opts ...client.CallOption) (*SimpleMessage, error)
	// EchoDelete method receives a simple message and returns it.
	EchoDelete(ctx context.Context, in *SimpleMessage, opts ...client.CallOption) (*SimpleMessage, error)
}

type echoService struct {
	c    client.Client
	name string
}

func NewEchoService(name string, c client.Client) EchoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "grpc.gateway.examples.examplepb"
	}
	return &echoService{
		c:    c,
		name: name,
	}
}

func (c *echoService) Echo(ctx context.Context, in *SimpleMessage, opts ...client.CallOption) (*SimpleMessage, error) {
	req := c.c.NewRequest(c.name, "EchoService.Echo", in)
	out := new(SimpleMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoService) EchoBody(ctx context.Context, in *SimpleMessage, opts ...client.CallOption) (*SimpleMessage, error) {
	req := c.c.NewRequest(c.name, "EchoService.EchoBody", in)
	out := new(SimpleMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoService) EchoDelete(ctx context.Context, in *SimpleMessage, opts ...client.CallOption) (*SimpleMessage, error) {
	req := c.c.NewRequest(c.name, "EchoService.EchoDelete", in)
	out := new(SimpleMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EchoService service

type EchoServiceHandler interface {
	// Echo method receives a simple message and returns it.
	//
	// The message posted as the id parameter will also be
	// returned.
	Echo(context.Context, *SimpleMessage, *SimpleMessage) error
	// EchoBody method receives a simple message and returns it.
	EchoBody(context.Context, *SimpleMessage, *SimpleMessage) error
	// EchoDelete method receives a simple message and returns it.
	EchoDelete(context.Context, *SimpleMessage, *SimpleMessage) error
}

func RegisterEchoServiceHandler(s server.Server, hdlr EchoServiceHandler, opts ...server.HandlerOption) error {
	type echoService interface {
		Echo(ctx context.Context, in *SimpleMessage, out *SimpleMessage) error
		EchoBody(ctx context.Context, in *SimpleMessage, out *SimpleMessage) error
		EchoDelete(ctx context.Context, in *SimpleMessage, out *SimpleMessage) error
	}
	type EchoService struct {
		echoService
	}
	h := &echoServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EchoService{h}, opts...))
}

type echoServiceHandler struct {
	EchoServiceHandler
}

func (h *echoServiceHandler) Echo(ctx context.Context, in *SimpleMessage, out *SimpleMessage) error {
	return h.EchoServiceHandler.Echo(ctx, in, out)
}

func (h *echoServiceHandler) EchoBody(ctx context.Context, in *SimpleMessage, out *SimpleMessage) error {
	return h.EchoServiceHandler.EchoBody(ctx, in, out)
}

func (h *echoServiceHandler) EchoDelete(ctx context.Context, in *SimpleMessage, out *SimpleMessage) error {
	return h.EchoServiceHandler.EchoDelete(ctx, in, out)
}
