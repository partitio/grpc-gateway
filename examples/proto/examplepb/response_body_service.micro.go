// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: examples/proto/examplepb/response_body_service.proto

package examplepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ResponseBodyService service

type ResponseBodyService interface {
	GetResponseBody(ctx context.Context, in *ResponseBodyIn, opts ...client.CallOption) (*ResponseBodyOut, error)
}

type responseBodyService struct {
	c    client.Client
	name string
}

func NewResponseBodyService(name string, c client.Client) ResponseBodyService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "grpc.gateway.examples.examplepb"
	}
	return &responseBodyService{
		c:    c,
		name: name,
	}
}

func (c *responseBodyService) GetResponseBody(ctx context.Context, in *ResponseBodyIn, opts ...client.CallOption) (*ResponseBodyOut, error) {
	req := c.c.NewRequest(c.name, "ResponseBodyService.GetResponseBody", in)
	out := new(ResponseBodyOut)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResponseBodyService service

type ResponseBodyServiceHandler interface {
	GetResponseBody(context.Context, *ResponseBodyIn, *ResponseBodyOut) error
}

func RegisterResponseBodyServiceHandler(s server.Server, hdlr ResponseBodyServiceHandler, opts ...server.HandlerOption) error {
	type responseBodyService interface {
		GetResponseBody(ctx context.Context, in *ResponseBodyIn, out *ResponseBodyOut) error
	}
	type ResponseBodyService struct {
		responseBodyService
	}
	h := &responseBodyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ResponseBodyService{h}, opts...))
}

type responseBodyServiceHandler struct {
	ResponseBodyServiceHandler
}

func (h *responseBodyServiceHandler) GetResponseBody(ctx context.Context, in *ResponseBodyIn, out *ResponseBodyOut) error {
	return h.ResponseBodyServiceHandler.GetResponseBody(ctx, in, out)
}
